// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace projetquentinjuliette.Migrations
{
    [DbContext(typeof(CalabarContext))]
    [Migration("20230107202425_jointureUserAssoP2P")]
    partial class jointureUserAssoP2P
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("AssociationMembreAssociationClub", b =>
                {
                    b.Property<int>("AssociationsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembreAssociationClubsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssociationsId", "MembreAssociationClubsId");

                    b.HasIndex("MembreAssociationClubsId");

                    b.ToTable("UserAssos", (string)null);
                });

            modelBuilder.Entity("Models.Association", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Associations");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.Consommable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssociationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("PrixAchat")
                        .HasColumnType("REAL");

                    b.Property<double>("PrixVente")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantite")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssociationId");

                    b.ToTable("Consommables");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.Facture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConsommableId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PrixHT")
                        .HasColumnType("REAL");

                    b.Property<double>("PrixTTC")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ConsommableId");

                    b.HasIndex("FournisseurId");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("Models.Fournisseur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Siret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fournisseurs");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Utilisateurs");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.Bureau", b =>
                {
                    b.HasBaseType("Models.Association");

                    b.ToTable("Bureaux", (string)null);
                });

            modelBuilder.Entity("Models.Club", b =>
                {
                    b.HasBaseType("Models.Association");

                    b.Property<int>("DependDeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdBureau")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DependDeId");

                    b.ToTable("Clubs", (string)null);
                });

            modelBuilder.Entity("Models.Biere", b =>
                {
                    b.HasBaseType("Models.Consommable");

                    b.Property<int>("BrasserieId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Degre")
                        .HasColumnType("REAL");

                    b.Property<double>("TailleBouteilleLitre")
                        .HasColumnType("REAL");

                    b.Property<int>("TypeDeBiere")
                        .HasColumnType("INTEGER");

                    b.HasIndex("BrasserieId");

                    b.ToTable("Bieres", (string)null);
                });

            modelBuilder.Entity("Models.Nourriture", b =>
                {
                    b.HasBaseType("Models.Consommable");

                    b.ToTable("Nourritures", (string)null);
                });

            modelBuilder.Entity("Models.Soft", b =>
                {
                    b.HasBaseType("Models.Consommable");

                    b.Property<double>("TailleBouteilleLitre")
                        .HasColumnType("REAL");

                    b.ToTable("Softs", (string)null);
                });

            modelBuilder.Entity("Models.Vin", b =>
                {
                    b.HasBaseType("Models.Consommable");

                    b.Property<int>("ChateauId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Millesime")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TailleBouteilleLitre")
                        .HasColumnType("REAL");

                    b.HasIndex("ChateauId");

                    b.ToTable("Vins", (string)null);
                });

            modelBuilder.Entity("Models.Brasserie", b =>
                {
                    b.HasBaseType("Models.Fournisseur");

                    b.ToTable("Brasseries", (string)null);
                });

            modelBuilder.Entity("Models.Chateau", b =>
                {
                    b.HasBaseType("Models.Fournisseur");

                    b.ToTable("Chateaux", (string)null);
                });

            modelBuilder.Entity("Models.Supermarche", b =>
                {
                    b.HasBaseType("Models.Fournisseur");

                    b.ToTable("Supermarches", (string)null);
                });

            modelBuilder.Entity("Models.MembreAssociationClub", b =>
                {
                    b.HasBaseType("Models.Utilisateur");

                    b.ToTable("MembreAssociationClubs", (string)null);
                });

            modelBuilder.Entity("Models.UtilisateurCommun", b =>
                {
                    b.HasBaseType("Models.Utilisateur");

                    b.Property<bool?>("EstUnEtudiant")
                        .HasColumnType("INTEGER");

                    b.ToTable("UtilisateurCommuns", (string)null);
                });

            modelBuilder.Entity("Models.Administrateur", b =>
                {
                    b.HasBaseType("Models.MembreAssociationClub");

                    b.ToTable("Administrateurs", (string)null);
                });

            modelBuilder.Entity("Models.Collaborateur", b =>
                {
                    b.HasBaseType("Models.MembreAssociationClub");

                    b.ToTable("Collaborateurs", (string)null);
                });

            modelBuilder.Entity("AssociationMembreAssociationClub", b =>
                {
                    b.HasOne("Models.Association", null)
                        .WithMany()
                        .HasForeignKey("AssociationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.MembreAssociationClub", null)
                        .WithMany()
                        .HasForeignKey("MembreAssociationClubsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Consommable", b =>
                {
                    b.HasOne("Models.Association", "Association")
                        .WithMany()
                        .HasForeignKey("AssociationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Association");
                });

            modelBuilder.Entity("Models.Facture", b =>
                {
                    b.HasOne("Models.Consommable", null)
                        .WithMany("ApparaitSur")
                        .HasForeignKey("ConsommableId");

                    b.HasOne("Models.Fournisseur", "Fournisseur")
                        .WithMany()
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fournisseur");
                });

            modelBuilder.Entity("Models.Bureau", b =>
                {
                    b.HasOne("Models.Association", null)
                        .WithOne()
                        .HasForeignKey("Models.Bureau", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Club", b =>
                {
                    b.HasOne("Models.Bureau", "DependDe")
                        .WithMany("listeClubs")
                        .HasForeignKey("DependDeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Association", null)
                        .WithOne()
                        .HasForeignKey("Models.Club", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DependDe");
                });

            modelBuilder.Entity("Models.Biere", b =>
                {
                    b.HasOne("Models.Brasserie", "Brasserie")
                        .WithMany()
                        .HasForeignKey("BrasserieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Consommable", null)
                        .WithOne()
                        .HasForeignKey("Models.Biere", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brasserie");
                });

            modelBuilder.Entity("Models.Nourriture", b =>
                {
                    b.HasOne("Models.Consommable", null)
                        .WithOne()
                        .HasForeignKey("Models.Nourriture", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Soft", b =>
                {
                    b.HasOne("Models.Consommable", null)
                        .WithOne()
                        .HasForeignKey("Models.Soft", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Vin", b =>
                {
                    b.HasOne("Models.Chateau", "Chateau")
                        .WithMany()
                        .HasForeignKey("ChateauId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Consommable", null)
                        .WithOne()
                        .HasForeignKey("Models.Vin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chateau");
                });

            modelBuilder.Entity("Models.Brasserie", b =>
                {
                    b.HasOne("Models.Fournisseur", null)
                        .WithOne()
                        .HasForeignKey("Models.Brasserie", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Chateau", b =>
                {
                    b.HasOne("Models.Fournisseur", null)
                        .WithOne()
                        .HasForeignKey("Models.Chateau", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Supermarche", b =>
                {
                    b.HasOne("Models.Fournisseur", null)
                        .WithOne()
                        .HasForeignKey("Models.Supermarche", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.MembreAssociationClub", b =>
                {
                    b.HasOne("Models.Utilisateur", null)
                        .WithOne()
                        .HasForeignKey("Models.MembreAssociationClub", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.UtilisateurCommun", b =>
                {
                    b.HasOne("Models.Utilisateur", null)
                        .WithOne()
                        .HasForeignKey("Models.UtilisateurCommun", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Administrateur", b =>
                {
                    b.HasOne("Models.MembreAssociationClub", null)
                        .WithOne()
                        .HasForeignKey("Models.Administrateur", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Collaborateur", b =>
                {
                    b.HasOne("Models.MembreAssociationClub", null)
                        .WithOne()
                        .HasForeignKey("Models.Collaborateur", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Consommable", b =>
                {
                    b.Navigation("ApparaitSur");
                });

            modelBuilder.Entity("Models.Bureau", b =>
                {
                    b.Navigation("listeClubs");
                });
#pragma warning restore 612, 618
        }
    }
}
